// Code generated by sqlc. DO NOT EDIT.
// source: resized_item.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createResizedItem = `-- name: CreateResizedItem :one
INSERT INTO resized_items (id, oid, name, path, url, height, width)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, oid, name, path, url, height, width, created_at
`

type CreateResizedItemParams struct {
	ID     uuid.UUID `json:"id"`
	OID    uuid.UUID `json:"oid"`
	Name   string    `json:"name"`
	Path   string    `json:"path"`
	URL    string    `json:"url"`
	Height int32     `json:"height"`
	Width  int32     `json:"width"`
}

func (q *Queries) CreateResizedItem(ctx context.Context, arg CreateResizedItemParams) (ResizedItem, error) {
	row := q.db.QueryRowContext(ctx, createResizedItem,
		arg.ID,
		arg.OID,
		arg.Name,
		arg.Path,
		arg.URL,
		arg.Height,
		arg.Width,
	)
	var i ResizedItem
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.Name,
		&i.Path,
		&i.URL,
		&i.Height,
		&i.Width,
		&i.CreatedAt,
	)
	return i, err
}

const getResizedItemByID = `-- name: GetResizedItemByID :one
SELECT id, oid, name, path, url, height, width, created_at FROM resized_items
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetResizedItemByID(ctx context.Context, id uuid.UUID) (ResizedItem, error) {
	row := q.db.QueryRowContext(ctx, getResizedItemByID, id)
	var i ResizedItem
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.Name,
		&i.Path,
		&i.URL,
		&i.Height,
		&i.Width,
		&i.CreatedAt,
	)
	return i, err
}

const getResizedItemsList = `-- name: GetResizedItemsList :many
SELECT id, oid, name, path, url, height, width, created_at FROM resized_items
WHERE oid = $1
ORDER BY created_at DESC
`

func (q *Queries) GetResizedItemsList(ctx context.Context, oid uuid.UUID) ([]ResizedItem, error) {
	rows, err := q.db.QueryContext(ctx, getResizedItemsList, oid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResizedItem
	for rows.Next() {
		var i ResizedItem
		if err := rows.Scan(
			&i.ID,
			&i.OID,
			&i.Name,
			&i.Path,
			&i.URL,
			&i.Height,
			&i.Width,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
