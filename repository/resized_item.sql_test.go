// Code generated by sqlc. DO NOT EDIT.
// source: resized_item.sql

package repository

import (
	"context"
	"errors"
	"reflect"
	"testing"
	"time"

	"github.com/google/uuid"
)

func TestQueries_CreateResizedItem(t *testing.T) {
	createdAt, _ := time.Parse("Mon Jan 2 15:04:05 -0700 MST 2006", "Mon Jan 2 15:04:05 -0700 MST 2006")
	arg := CreateResizedItemParams{
		ID:     uuid.New(),
		OID:    uuid.New(),
		Name:   "image.png",
		Path:   "uploads/image.png",
		URL:    "http://test/uploads/image.png",
		Width:  100,
		Height: 100,
	}
	item := ResizedItem{
		ID:        arg.ID,
		OID:       arg.OID,
		Name:      arg.Name,
		Path:      arg.Path,
		URL:       arg.URL,
		Width:     arg.Width,
		Height:    arg.Height,
		CreatedAt: createdAt,
	}

	db, mock, err := NewSQLMock()
	if err != nil {
		panic(err)
	}
	defer db.Close()
	CreateResizedItemMock(mock, arg, nil)

	t.Run("success", func(t *testing.T) {
		q := &Queries{
			db: db,
		}
		got, err := q.CreateResizedItem(context.TODO(), arg)
		if err != nil {
			t.Errorf("Queries.CreateResizedItem() error = %v", err)
			return
		}
		if !reflect.DeepEqual(got, item) {
			t.Errorf("Queries.CreateResizedItem() = %v, want %v", got, item)
		}
	})

	expErr := errors.New("CreateResizedItem")
	CreateResizedItemMock(mock, arg, expErr)

	t.Run("error", func(t *testing.T) {
		q := &Queries{
			db: db,
		}
		_, err := q.CreateResizedItem(context.TODO(), arg)
		if err == nil {
			t.Errorf("Queries.CreateResizedItem() error = %v, wantErr %v", err, expErr)
			return
		}
	})
}

func TestQueries_GetResizedItemByID(t *testing.T) {
	createdAt, _ := time.Parse("Mon Jan 2 15:04:05 -0700 MST 2006", "Mon Jan 2 15:04:05 -0700 MST 2006")
	item := ResizedItem{
		ID:        uuid.New(),
		OID:       uuid.New(),
		Name:      "image.png",
		Path:      "uploads/image.png",
		URL:       "http://test/uploads/image.png",
		Width:     100,
		Height:    100,
		CreatedAt: createdAt,
	}

	db, mock, err := NewSQLMock()
	if err != nil {
		panic(err)
	}
	defer db.Close()
	GetResizedItemByIDMock(mock, item, nil)

	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		id  uuid.UUID
	}
	tt := struct {
		name    string
		fields  fields
		args    args
		want    ResizedItem
		wantErr bool
	}{"success", fields{db}, args{context.TODO(), item.ID}, item, false}
	t.Run(tt.name, func(t *testing.T) {
		q := &Queries{
			db: tt.fields.db,
		}
		got, err := q.GetResizedItemByID(tt.args.ctx, tt.args.id)
		if (err != nil) != tt.wantErr {
			t.Errorf("Queries.GetResizedItemByID() error = %v, wantErr %v", err, tt.wantErr)
			return
		}
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("Queries.GetResizedItemByID() = %v, want %v", got, tt.want)
		}
	})

	expErr := errors.New("GetResizedItemByID")
	GetResizedItemByIDMock(mock, item, expErr)
	tt = struct {
		name    string
		fields  fields
		args    args
		want    ResizedItem
		wantErr bool
	}{"error", fields{db}, args{context.TODO(), item.OID}, ResizedItem{}, true}
	t.Run(tt.name, func(t *testing.T) {
		q := &Queries{
			db: tt.fields.db,
		}
		got, err := q.GetResizedItemByID(tt.args.ctx, tt.args.id)
		if (err != nil) != tt.wantErr {
			t.Errorf("Queries.GetResizedItemByID() error = %v, wantErr %v", err, tt.wantErr)
			return
		}
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("Queries.GetResizedItemByID() = %v, want %v", got, tt.want)
		}
	})
}

func TestQueries_GetResizedItemsList(t *testing.T) {
	createdAt, _ := time.Parse("Mon Jan 2 15:04:05 -0700 MST 2006", "Mon Jan 2 15:04:05 -0700 MST 2006")
	oid := uuid.New()
	items := []ResizedItem{
		{
			ID:        uuid.New(),
			OID:       oid,
			Name:      "image.png",
			Path:      "uploads/image.png",
			URL:       "http://test/uploads/image.png",
			Width:     100,
			Height:    100,
			CreatedAt: createdAt,
		},
		{
			ID:        uuid.New(),
			OID:       oid,
			Name:      "image.png",
			Path:      "uploads/image.png",
			URL:       "http://test/uploads/image.png",
			Width:     100,
			Height:    100,
			CreatedAt: createdAt,
		},
	}

	db, mock, err := NewSQLMock()
	if err != nil {
		panic(err)
	}
	defer db.Close()
	GetResizedItemsListMock(mock, oid, items, nil)

	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		oid uuid.UUID
	}
	tt := struct {
		name    string
		fields  fields
		args    args
		want    []ResizedItem
		wantErr bool
	}{"success", fields{db}, args{context.TODO(), oid}, items, false}
	t.Run(tt.name, func(t *testing.T) {
		q := &Queries{
			db: tt.fields.db,
		}
		got, err := q.GetResizedItemsList(tt.args.ctx, tt.args.oid)
		if (err != nil) != tt.wantErr {
			t.Errorf("Queries.GetResizedItemsList() error = %v, wantErr %v", err, tt.wantErr)
			return
		}
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("Queries.GetResizedItemsList() = %v, want %v", got, tt.want)
		}
	})

	expErr := errors.New("GetResizedItemsList")
	GetResizedItemsListMock(mock, oid, items, expErr)
	tt = struct {
		name    string
		fields  fields
		args    args
		want    []ResizedItem
		wantErr bool
	}{"success", fields{db}, args{context.TODO(), oid}, nil, true}
	t.Run(tt.name, func(t *testing.T) {
		q := &Queries{
			db: tt.fields.db,
		}
		got, err := q.GetResizedItemsList(tt.args.ctx, tt.args.oid)
		if (err != nil) != tt.wantErr {
			t.Errorf("Queries.GetResizedItemsList() error = %v, wantErr %v", err, tt.wantErr)
			return
		}
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("Queries.GetResizedItemsList() = %v, want %v", got, tt.want)
		}
	})
}
